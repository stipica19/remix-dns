generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Transactions {
  id             Int       @id @default(autoincrement())
  order_id       Int
  transaction_id String    @db.VarChar(255)
  status         String    @db.VarChar(255)
  amount         Decimal   @db.Decimal(10, 2)
  currency       String    @default("USD") @db.VarChar(10)
  created_at     DateTime? @default(now()) @db.Timestamp(0)
}

model Usluge {
  ID          Int     @id
  NazivUsluge String? @db.VarChar(255)
}

model agents {
  id      Int     @id @default(autoincrement())
  name    String  @db.Text
  address String? @db.Text
  port    Int?
  x_auth  String  @db.Text
}

model forwarding {
  id              Int                     @id @default(autoincrement())
  record_id       Int
  destination_url String                  @db.VarChar(255)
  forward_type    forwarding_forward_type @default(permanent_301)
  disabled        Boolean?
  created_at      DateTime?               @default(now()) @db.Timestamp(0)
  updated_at      DateTime?               @db.Timestamp(0)
  records         records                 @relation(fields: [record_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "forwarding_ibfk_1")

  @@index([record_id], map: "record_id")
}

model records {
  id              Int          @id @unique(map: "id") @default(autoincrement())
  name            String?      @db.VarChar(255)
  type            Int          @db.SmallInt
  ttl             Int          @default(3600)
  data            String       @db.VarChar(255)
  zone_id         Int
  user_id         Int?
  auth_key        String?      @db.Char(255)
  created_at      DateTime     @default(now()) @db.Timestamp(0)
  updated_at      DateTime?    @db.Timestamp(0)
  soft_deleted_at DateTime?    @db.Timestamp(0)
  disabled        Int?         @db.TinyInt
  forwarding      forwarding[]
}

model role {
  id         Int         @id @default(autoincrement())
  naziv_role String      @unique(map: "naziv_role") @db.VarChar(50)
  role_user  role_user[]
}

model role_user {
  id      Int    @id @default(autoincrement())
  user_id Int?
  rola_id Int?
  users   users? @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "role_user_ibfk_1")
  role    role?  @relation(fields: [rola_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "role_user_ibfk_2")

  @@unique([user_id, rola_id], map: "user_id")
  @@index([rola_id], map: "rola_id")
}

model users {
  id              Int         @id @default(autoincrement())
  email           String      @db.TinyText
  username        String?     @unique(map: "username_UNIQUE") @db.VarChar(45)
  first_name      String?     @db.VarChar(45)
  last_name       String?     @db.VarChar(45)
  password        String?     @db.Text
  last_login      DateTime    @default(now()) @db.Timestamp(0)
  disabled        Boolean?
  isVerify        Boolean?    @default(false)
  google_id       String?     @unique @db.VarChar(255)
  profile_picture String?     @db.VarChar(255)
  created_at      DateTime?   @default(now()) @db.Timestamp(0)
  orders          orders[]
  role_user       role_user[]
  sessions        sessions[]
  user_tokens     UserToken[]
}

model zones {
  id              Int            @id @unique(map: "id") @default(autoincrement())
  name            String         @db.VarChar(255)
  ns1             Int?
  ns2             Int?
  ns3             Int?
  ns4             Int?
  is_default      Boolean        @default(false)
  user_id         Int
  auth_key        String?        @db.TinyText
  disabled        Boolean
  created_at      DateTime?      @db.Timestamp(0)
  updated_at      DateTime?      @db.Timestamp(0)
  soft_deleted_at DateTime?      @db.Timestamp(0)
  is_active       Boolean?       @default(false)
  zone_package    zone_package[]

  @@index([ns1, ns2, ns3, ns4], map: "ns1")
}

model UserToken {
  id        Int           @id @default(autoincrement())
  token     String        @unique(map: "token") @db.VarChar(255)
  userId    Int           @map("user_id")
  type      UserTokenType @map("type")
  expiresAt DateTime      @map("expires_at") @db.DateTime(0)
  createdAt DateTime?     @default(now()) @map("created_at") @db.DateTime(0)
  user      users         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "user_tokens_ibfk_1")

  @@index([userId], map: "user_id")
  @@map("user_tokens")
}

model order_items {
  id           Int            @id @default(autoincrement())
  order_id     Int
  package_id   Int
  quantity     Int            @default(1)
  price_each   Decimal        @db.Decimal(10, 2)
  valid_until  DateTime?      @db.Date
  orders       orders         @relation(fields: [order_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "order_items_ibfk_1")
  packages     packages       @relation(fields: [package_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "order_items_ibfk_2")
  zone_package zone_package[]

  @@index([order_id], map: "order_id")
  @@index([package_id], map: "package_id")
}

model orders {
  id               Int           @id @default(autoincrement())
  user_id          Int
  status           orders_status @default(pending)
  payment_provider String?       @db.VarChar(50)
  total_price      Decimal       @db.Decimal(10, 2)
  created_at       DateTime?     @default(now()) @db.DateTime(0)
  order_items      order_items[]
  users            users         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "orders_ibfk_1")

  @@index([user_id], map: "user_id")
}

model packages {
  id            Int                   @id @default(autoincrement())
  name          String                @db.VarChar(255)
  description   String                @db.VarChar(255)
  price_monthly Decimal               @db.Decimal(10, 2)
  price_yearly  Decimal               @db.Decimal(10, 2)
  package_type  packages_package_type
  order_items   order_items[]
}

model zone_package {
  id            Int         @id @default(autoincrement())
  zone_id       Int
  order_item_id Int
  zones         zones       @relation(fields: [zone_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "zone_package_ibfk_1")
  order_items   order_items @relation(fields: [order_item_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "zone_package_ibfk_2")

  @@index([order_item_id], map: "order_item_id")
  @@index([zone_id], map: "zone_id")
}

model sessions {
  id              Int      @id @default(autoincrement())
  expiration_date DateTime @db.DateTime(0)
  created_at      DateTime @default(now()) @db.DateTime(0)
  updated_at      DateTime @default(now()) @db.DateTime(0)
  user_id         Int
  users           users    @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "fk_user_id")

  @@index([user_id], map: "idx_user_id")
}

enum forwarding_forward_type {
  permanent_301
  temporary_302
  masking
}

enum UserTokenType {
  RESET_PASSWORD
  VERIFY_EMAIL
}

enum orders_status {
  pending
  paid
  failed
}

enum packages_package_type {
  client
  server
}
