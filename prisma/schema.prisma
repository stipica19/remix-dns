generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model OrderItems {
  id        Int    @id @default(autoincrement())
  order_id  Int
  paketi_id Int
  Orders    Orders @relation(fields: [order_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "OrderItems_ibfk_1")
  Paketi    Paketi @relation(fields: [paketi_id], references: [ID], onDelete: NoAction, onUpdate: NoAction, map: "OrderItems_ibfk_2")

  @@index([paketi_id], map: "OrderItems_ibfk_2")
  @@index([order_id], map: "order_id")
}

model Orders {
  id             Int            @id @default(autoincrement())
  user_id        Int
  payment_method String         @db.VarChar(255)
  total_price    Decimal        @default(0.00) @db.Decimal(10, 2)
  is_paid        Boolean        @default(false)
  paid_at        String?        @db.VarChar(45)
  created_at     DateTime?      @default(now()) @db.Timestamp(0)
  updated_at     DateTime?      @default(now()) @db.Timestamp(0)
  OrderItems     OrderItems[]
  users          users          @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Orders_ibfk_1")
  Transactions   Transactions[]

  @@index([user_id], map: "user_id")
}

model Paketi {
  ID          Int           @id @default(autoincrement())
  NazivPaketa String?       @db.VarChar(255)
  Trajanje    Int?
  Cijena      Decimal?      @db.Decimal(10, 2)
  Aktivan     Boolean?
  IDUsluge    Int?
  OrderItems  OrderItems[]
  Usluge      Usluge?       @relation(fields: [IDUsluge], references: [ID], onDelete: NoAction, onUpdate: NoAction, map: "Paketi_ibfk_1")
  dns_options dns_options[]

  @@index([IDUsluge], map: "IDUsluge")
}

model Transactions {
  id             Int       @id @default(autoincrement())
  order_id       Int
  transaction_id String    @db.VarChar(255)
  status         String    @db.VarChar(255)
  amount         Decimal   @db.Decimal(10, 2)
  currency       String    @default("USD") @db.VarChar(10)
  created_at     DateTime? @default(now()) @db.Timestamp(0)
  Orders         Orders    @relation(fields: [order_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Transactions_ibfk_1")

  @@index([order_id], map: "order_id")
}

model Usluge {
  ID          Int      @id
  NazivUsluge String?  @db.VarChar(255)
  Paketi      Paketi[]
}

model agents {
  id      Int     @id @default(autoincrement())
  name    String  @db.Text
  address String? @db.Text
  port    Int?
  x_auth  String  @db.Text
}

model dns_options {
  id             Int     @id @default(autoincrement())
  package_id     Int
  n_hostnames    Int
  s_ddns         Boolean
  n_zones        Int
  support_a      Boolean
  support_aaaa   Boolean
  support_cname  Boolean
  support_mx     Boolean
  support_txt    Boolean
  s_web_redirect Boolean
  Paketi         Paketi  @relation(fields: [package_id], references: [ID], onUpdate: Restrict, map: "dns_options_ibfk_1")

  @@index([package_id], map: "package_id")
}

model forwarding {
  id              Int                     @id @default(autoincrement())
  record_id       Int
  destination_url String                  @db.VarChar(255)
  forward_type    forwarding_forward_type @default(permanent_301)
  disabled        Boolean?
  created_at      DateTime?               @default(now()) @db.Timestamp(0)
  updated_at      DateTime?               @db.Timestamp(0)
  records         records                 @relation(fields: [record_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "forwarding_ibfk_1")

  @@index([record_id], map: "record_id")
}

model records {
  id              Int          @id @unique(map: "id") @default(autoincrement())
  name            String?      @db.VarChar(255)
  type            Int          @db.SmallInt
  ttl             Int          @default(3600)
  data            String       @db.VarChar(255)
  zone_id         Int
  user_id         Int?
  auth_key        String?      @db.Char(255)
  created_at      DateTime     @default(now()) @db.Timestamp(0)
  updated_at      DateTime?    @db.Timestamp(0)
  soft_deleted_at DateTime?    @db.Timestamp(0)
  disabled        Int?         @db.TinyInt
  forwarding      forwarding[]
}

model role {
  id         Int         @id @default(autoincrement())
  naziv_role String      @unique(map: "naziv_role") @db.VarChar(50)
  role_user  role_user[]
}

model role_user {
  id      Int    @id @default(autoincrement())
  user_id Int?
  rola_id Int?
  users   users? @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "role_user_ibfk_1")
  role    role?  @relation(fields: [rola_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "role_user_ibfk_2")

  @@unique([user_id, rola_id], map: "user_id")
  @@index([rola_id], map: "rola_id")
}

model tok {
  id         Int       @id @default(autoincrement())
  email      String    @db.VarChar(255)
  token      String    @db.VarChar(255)
  created_at DateTime? @default(now()) @db.Timestamp(0)

  @@unique([email, token], map: "email_2")
  @@index([email], map: "email")
}

model users {
  id              Int         @id @default(autoincrement())
  email           String      @db.TinyText
  password        String?     @db.Text
  last_login      DateTime    @default(now()) @db.Timestamp(0)
  disabled        Boolean?
  isVerify        Boolean?    @default(false)
  google_id       String?     @unique @db.VarChar(255)
  profile_picture String?     @db.VarChar(255)
  created_at      DateTime?   @default(now()) @db.Timestamp(0)
  name            String?     @db.VarChar(45)
  verifyToken     String?     @unique(map: "verifyToken_UNIQUE") @db.VarChar(45)
  Orders          Orders[]
  role_user       role_user[]
}

model zones {
  id              Int       @id @unique(map: "id") @default(autoincrement())
  name            String    @db.VarChar(255)
  ns1             Int?
  ns2             Int?
  ns3             Int?
  ns4             Int?
  is_default      Boolean   @default(false)
  user_id         Int
  auth_key        String?   @db.TinyText
  disabled        Boolean
  created_at      DateTime? @db.Timestamp(0)
  updated_at      DateTime? @db.Timestamp(0)
  soft_deleted_at DateTime? @db.Timestamp(0)

  @@index([ns1, ns2, ns3, ns4], map: "ns1")
}

enum forwarding_forward_type {
  permanent_301
  temporary_302
  masking
}
